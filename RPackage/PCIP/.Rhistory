suppressPackageStartupMessages(library(GenomicRanges))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(VennDiagram))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(clonalityTools))
suppressPackageStartupMessages(library(PIC))
suppressPackageStartupMessages(library(ggrepel))
# COLOR SCHEME
color <- c("darkgrey", "darkred", "cadetblue4", "darkgoldenrod3")
# ARCHITECTURE:
# initiateFolders(where)
# OAR -
#  annotation -
#    - cancerList
#    - OAR
#  biological_data -
#    - Antibody
#    - PVL
#    - Bcell
#  analysis -
#    - 1_downsampling
#    - 2_gtf
#      - date
#      - group
#      - HS
#      - ID
#    - 3_hotspots
#    - 4_statistics
#    - 5_timeseries
#  data -
#    - BAM
#    - contaminations
#    - merge
#    - raw
#    - simplified
#    - stats
#    - xls
# THEME
theme_thesis <- function(font_size = 14, font_family = "sans"){
library(cowplot)
theme_cowplot(font_size = font_size, font_family = font_family) +
theme(
axis.line = element_line(colour  =  'gray50', linetype  =  'solid'),
panel.grid.major = element_line(colour  =  'gray85', size  =  0.3),
panel.grid.minor = element_line(colour  =  'gray40', size  =  0.3, linetype  =  'blank'),
axis.text = element_text(family  =  'sans', colour  =  'gray5', size = 12),
axis.text.x = element_text(family  =  'sans', size = 14),
axis.text.y = element_text(family  =  'sans', size = 14),
panel.background = element_rect(fill  =  NA)
)
}
scale_color_manualVIDO <- function(){
scale_color_manual(values = c("INV" = "darkgoldenrod3", "DEL" = "cadetblue4", "WT" = "darkred", "CTRL" = "darkgrey"))
}
scale_fill_manualVIDO <- function(){
scale_fill_manual(values = c("INV" = "darkgoldenrod3", "DEL" = "cadetblue4", "WT" = "darkred", "CTRL" = "darkgrey"))
}
# 1. LOAD INTEGRATION SITES
noise <- read_delim(paste0(where, "contaminationTable.txt"), delim = "\t", col_names = T)
IS_all <- read_delim(paste0(where, "Clonality_concat_allCombined.txt"), delim = "\t", col_names = T)
IS_all.cleaned <- read_delim(paste0(where, "Clonality_concat_allCombined_noContaminations.txt"), delim = "\t", col_names = T)
IS_all.statistics <- read_delim(paste0(where, "analysis/4_statistics/runStatistics.txt"), delim = "\t", col_names = T)
IS_all.cleaned.dedup <- read_delim(paste0(where, "Combined_concat_allCombined_noContaminations_duplicatedRemoved.txt"), delim = "\t", col_names = T)
HS <- lapply(list.files(path.hotspots, full.names = T),  function(x) if(file.info(x)$size > 0) read_delim(x, delim = "\t", col_names = T))
names(HS) <- str_replace_all(str_split(list.files(path.hotspots, full.names = T), "/", simplify = T)[,9], "_hotspots.txt", "")
HS$DEL$group <- "DEL"
HS$WT$group <- "WT"
HS$INV$group <- "INV"
HS$INVpost$group <- "INVpost"
timeSeries <- lapply(list.files(path.timeseries, full.names = T),  function(x) if(file.info(x)$size > 0) as_tibble(read.delim(x, sep = "\t", header = T)))
names(timeSeries) <- str_replace_all(str_split(list.files(path.timeseries, full.names = T), "/", simplify = T)[,9], "_timeSeries.txt", "")
# 2. LOAD BIOLOGICAL DATA
pvlDataTable <- read_tsv(paste0(where, "biological_data/PVL/PVL_December2018.txt"))
p24.table <- read_tsv(paste0(where, "biological_data/Antibody/p24_antibody.txt"))
gp51.table <- read_tsv(paste0(where, "biological_data/Antibody/gp51_antibody.txt"))
colData <- read.delim(paste0(where, "biological_data/Bcell/BLV_PVL-Bcell.txt"))
# 3. DEATHDATES:
# Dataframe from the death across time and associated major clone
deathdates <- as_tibble(read.table(sep="\t", text="ID	death	Group	date	y	chr	position	dateClonality
206	LEU/TUM	WT	2017-07-13	9	OAR2	242229280	2017-07-04
208	Unrelated	DEL	2015-03-31	9	NA	NA	NA
209	alive	INV	NA	NA	NA	NA	NA
210	alive	DEL	NA	NA	NA	NA	NA
211	Unrelated	INV	2016-11-10	7	NA	NA	NA
214	alive	DEL	NA	NA	NA	NA	NA
215	LEU/TUM	WT	2014-06-12	9	OAR1	12141787	2014-05-22
216	alive	INV	NA	NA	NA	NA	NA
217	Unrelated	INV	2015-01-30	5	NA	NA	NA
218	alive	DEL	NA	NA	NA	NA	NA
219	alive	DEL	NA	NA	NA	NA	NA
220	LEU/TUM	WT	2015-11-22	9	OAR14	13389247	2015-11-22
221	LEU/TUM	WT	2016-06-28	9	OAR11	50962210	2016-07-28
222	LEU/TUM	WT	2015-11-26	9	OAR19	53583235	2015-11-26
223	alive	INV	NA	NA	NA	NA	NA
224	alive	DEL	NA	NA	NA	NA	NA
225	Unrelated	WT	2015-01-14	9	NA	NA	NA
226	LEU/TUM	INV	2017-07-06	7	OAR14	13725715	2017-07-06
227	alive	DEL	NA	NA	NA	NA	NA
228	alive	DEL	NA	NA	NA	NA	NA
229	alive	INV	NA	NA	NA	NA	NA
230	alive	DEL	NA	NA	NA	NA	NA
231	alive	INV	NA	NA	NA	NA	NA
232	LEU/TUM	WT	2017-06-22	9	OARX	38674637	2017-06-22
233	LEU/TUM	WT	2018-10-22	9	OAR19	56172707	2018-10-22
234	alive	DEL	NA	NA	NA	NA	NA
235	LEU/TUM	WT	2014-06-11	9	OAR11	18695801	2014-05-22
236	alive	WT	NA	NA	NA	NA	NA
237	alive	INV	NA	NA	NA	NA	NA
238	alive	INV	NA	NA	NA	NA	NA", header=T)) %>%
mutate(date=as.numeric(as.Date(date)-as.Date("2012-12-04"))) %>%
filter(death != "alive")
# 1. LOAD NUMBER OF BLV+ ANIMAL (qPCR)
data.evolutionInfection <-
as_tibble(
read.table(
check.names=F, header=T, sep="\t", text=
"Group	6	10	18	29	36	43	52	59	71	85	99	113	141	176	211	246	289	378	425	468	509	534	562	619	660	695	736	778	833	904	944	1041	1104	1169	1232	1293	1384	1414	1465	1602	1671	1744	1835	1961	2028	2087	2155	2204
WT	0	0	1	1	3	5	6	6	6	6	6	7	7	8	8	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9	9
DEL	0	0	0	3	4	4	5	6	8	8	8	9	9	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10
INV	0	0	1	1	1	1	1	1	1	2	3	3	4	4	4	4	4	4	4	4	4	4	4	4	4	4	4	4	4	4	4	5	5	6	6	6	6	6	6	6	6	6	6	6	6	6	6	6")
) %>%
gather(dpi, `Number Positive Animals`, -Group) %>%
mutate(Group = trimws(Group),
date = as.Date("2012-12-06") + as.numeric(dpi))
A <- ggplot(data.evolutionInfection, aes(date, `Number Positive Animals`, col=Group, group=Group)) +
geom_line(size = 1.25) +
geom_point(col = "black") +
scale_x_date(breaks = scales::date_breaks("year"), labels = c(0:8)) +
scale_y_continuous(breaks = c(0:10), limits = c(0,10)) +
xlab("Years") +
ylab("BLV Positive Sheep") +
theme_thesis(font_size = 22) +
theme(axis.text.x = element_text(size = 17), axis.text.y = element_text(size = 17)) +
scale_color_manualVIDO() +
theme(legend.position = 'none')
B <- ggplot(data.evolutionInfection, aes(as.numeric(dpi), `Number Positive Animals`, col=Group, group=Group)) +
geom_line(size = 1.25) +
geom_point(col = "black")  +
scale_y_continuous(breaks=c(0:10), limits=  c(0,10)) +
ylab("BLV Positive Sheep") +
scale_x_continuous(breaks=seq(0,150,25), limits = c(0,150)) +
xlab("Days post-infection") +
theme_thesis(font_size = 22) +
theme(axis.text.x = element_text(size = 17), axis.text.y = element_text(size = 17)) +
theme(legend.title = element_blank()) +
scale_color_manualVIDO() +
guides(color = guide_legend(nrow = 1))
# 2. REGROUP PLOTS
p <- plot_grid(ggdraw() +
draw_plot(B + theme(legend.position = "none"), x = 0, y = 0.2, height = 0.8, width = 1) +
draw_plot(get_legend(B), x = 0.35, y = 0, height = 0.19, width = 1),
A + theme(legend.position = "none"),
rel_widths = c(0.4, 0.6), labels = c("A", "B"))
ggsave(plot = p, filename = "~/Doctorat/Administratif/THESIS/Pictures/Clonality/MAIN/FIG_2/FIG2_BLVpositiveAnimal.tiff", dpi = 300, width = 16, height = 9)
# Dataframe of survival (number of BLV animals alive)
survival <- as_data_frame(read.csv(sep=",", text="iindex,death,Group,date,animals,ID
1,point,WT,04/12/12,10,NA
2,point,WT,11/06/14,10,NA
3,LEU/TUM,WT,11/06/14,8,235
4,LEU/TUM,WT,11/06/14,8,215
5,point,WT,14/01/15,8,NA
6,Unrelated,WT,14/01/15,7,225
7,point,WT,26/11/15,7,NA
8,LEU/TUM,WT,26/11/15,5,220
9,LEU/TUM,WT,26/11/15,5,222
10,point,WT,28/06/16,5,NA
11,LEU/TUM,WT,28/06/16,4,221
12,point,WT,22/06/17,4,NA
13,LEU/TUM,WT,22/06/17,3,232
14,point,WT,13/07/17,3,NA
15,LEU/TUM,WT,13/07/17,2,206
17,point,WT,22/10/18,2,233
18,LEU/TUM,WT,22/10/18,1,NA
19,end,WT,31/10/18,1,NA
20,point,INV,04/12/12,9,NA
21,point,INV,30/01/15,9,NA
22,Unrelated,INV,30/01/15,8,217
23,point,INV,10/11/16,8,NA
24,Unrelated,INV,10/11/16,7,211
25,point,INV,06/07/17,7,NA
26,LEU/TUM,INV,06/07/17,6,226
27,point,INV,06/07/17,6,NA
27,point,INV,26/06/18,6,NA
28,Unrelated,INV,26/06/18,5,209
29,end,INV,31/10/18,5,
28,point,DEL,04/12/12,11,NA
29,point,DEL,31/03/15,11,NA
30,Unrelated,DEL,31/03/15,10,208
31,end,DEL,31/10/18,10,NA
32,point,CTRL,04/12/12,3,NA
33,point,CTRL,11/03/14,3,213
34,point,CTRL,11/03/14,2,NA
35,end,CTRL,31/10/18,2", header=T)) %>%
mutate(date = as.Date(date, format = "%d/%m/%y"),
dpi=as.numeric(as.Date(date)-as.Date("2012-12-04")),
Group = factor(Group, levels = c("WT", "DEL", "INV")))
survival.plot <- survival %>%
filter(Group != "CTRL") %>%
ggplot(aes(x = date, y = animals, color = Group, group = Group)) +
geom_point(data = survival %>% filter(death == "LEU/TUM"), aes(y = animals, fill = "Leukemia"), shape = 16, size = 5, color = "black") +
geom_point(size = 2.5) +
geom_line(size=1.1) +
scale_color_manualVIDO() +
theme_thesis(font_size = 22) +
theme(legend.title = element_blank(),
axis.text.x = element_text(size = 17), axis.text.y = element_text(size = 17)) +
scale_y_continuous(breaks=seq(0, 11, 1), limits=c(0,11)) +
scale_x_date(breaks = scales::date_breaks("year"), labels = c(0:8)) +
xlab("Years") +
ylab("Number of Animals Surviving")
library(UpSetR)
HS.gr <- bind_rows(HS) %>%
dplyr::filter(group %in% c("WT", "DEL", "INV")) %>%
makeGRangesFromDataFrame(keep.extra.column=T)
gap <- 10000
DEL_WT.overlaps <- findOverlaps(HS.gr[HS.gr$group=="DEL"], HS.gr[HS.gr$group=="WT"])
INV_WT.overlaps <- findOverlaps(HS.gr[HS.gr$group=="INV"], HS.gr[HS.gr$group=="WT"])
INV_DEL.overlaps <- findOverlaps(HS.gr[HS.gr$group=="INV"], HS.gr[HS.gr$group=="DEL"])
w.overlap.DEL_WT <- width(reduce(pintersect(HS.gr[HS.gr$group=="DEL"][queryHits(DEL_WT.overlaps)], HS.gr[HS.gr$group=="WT"][subjectHits(DEL_WT.overlaps)])))
w.overlap.INV_WT <- width(reduce(pintersect(HS.gr[HS.gr$group=="INV"][queryHits(INV_WT.overlaps)], HS.gr[HS.gr$group=="WT"][subjectHits(INV_WT.overlaps)])))
w.overlap.INV_DEL <- width(reduce(pintersect(HS.gr[HS.gr$group=="INV"][queryHits(INV_DEL.overlaps)], HS.gr[HS.gr$group=="DEL"][subjectHits(INV_DEL.overlaps)])))
p.overlap.DEL_WT <- 100*sum(w.overlap.DEL_WT)/sum(width(HS.gr[HS.gr$group=="DEL"]))
p.overlap.INV_WT <- 100*sum(w.overlap.INV_WT)/sum(width(HS.gr[HS.gr$group=="INV"]))
p.overlap.INV_DEL <- 100*sum(w.overlap.INV_DEL)/sum(width(HS.gr[HS.gr$group=="INV"]))
# WT:
# ONLY INDEX WT
HS.gr.WT <- HS.gr[HS.gr$group=="WT"]
WT <- paste0("WT_", 1:length(HS.gr.WT))
# DEL:
# OVERLAP WT-DEL + others as random
HS.gr.DEL <- HS.gr[HS.gr$group=="DEL"]
DEL.WT <- paste0("WT_", queryHits(findOverlaps(HS.gr.WT, HS.gr.DEL, maxgap=gap)))
DEL.alone <- paste0("DEL_", (1:length(HS.gr.DEL))[!1:length(HS.gr.DEL) %in% sort(subjectHits(findOverlaps(HS.gr.WT, HS.gr.DEL, maxgap=gap)))])
# INV:
# OVERLAP WT-DEL + others as random
HS.gr.INV <- HS.gr[HS.gr$group=="INV"]
INV.WT <- paste0("WT_", queryHits(findOverlaps(HS.gr.WT, HS.gr.INV, maxgap=gap)))
INV.alone <- paste0("INV_", (1:length(HS.gr.INV))[!1:length(HS.gr.INV) %in% sort(subjectHits(findOverlaps(HS.gr.WT, HS.gr.INV, maxgap=gap)))])
listInput <- list(WT = WT,
DEL = c(DEL.WT, DEL.alone),
INV = c(INV.WT, INV.alone)
)
tiff(filename = "~/Doctorat/Administratif/THESIS/Pictures/Clonality/MAIN/FIG_5/upset.tiff", height = 1600, width = 2400)
upset(fromList(listInput), order.by = "degree",
mainbar.y.label = "Hotspot Intersections", sets.x.label = "Number Hotspots",
point.size = 18,
line.size = 12,
text.scale = c(12, 12, 8, 8, 12, 12),
sets.bar.color = c("darkred", "darkgoldenrod3","cadetblue4"),
main.bar.color = c("black", "black", "black",  "cadetblue4", "darkgoldenrod3", "darkred"))
dev.off()
# Statistical test:
# Generate 'numberHS' windows of 'medianHSsize' and compute their overlap with WT HS to see if the enrichment is significant.
# Parameters
# set.seed(42)
# times = 10000
# medianHSsize <- HS[[2]] %>% mutate(width = end - start) %>% summarise(size = median(width))
# numberHS <- nrow(HS[[2]])
# chromSize <- getChromSize("OAR")
# Integrable genome:
# integrableWindows <- GenomicRanges::reduce(makeGRangesFromDataFrame(IS_all.cleaned.dedup, start.field = "pos", end.field = "pos") + 10000) %>%
#  as_data_frame() %>%
#  left_join(chromSize, by = c("seqnames" = "chr")) %>%
#  mutate(start = ifelse(start < 0, 0, start),
#         end = ifelse(end > size, size, end),
#         weigth = width / sum(width))
#HS.WT.gr <- HS.gr[HS.gr$group == "WT"]
# overlap <- vector()
#for(i in 1:times){
#  print(i)
#  win <- sample_n(size = numberHS, tbl = integrableWindows, weight = weigth)
#  simulatedHS <- apply(win, 1, function(x) sample(size = 1, x = x["start"]:x["end"]))
#  gr <- makeGRangesFromDataFrame(data.frame(chr = win$seqnames,
#                                            start = simulatedHS - (medianHSsize$size/2),
#                                            end = simulatedHS + (medianHSsize$size/2)))
#
#  overlap <- c(overlap, sum(countOverlaps(gr, HS.WT.gr) > 0))
#}
# pval <- sum(WTvsINV <= overlap)/times
# p.adj(pval)
# 1. LOAD PEAK SEROCONVERSION INFORMATION
firstPEAK <- read_tsv(paste0(where, "/biological_data/FirstPEAK_PVL.txt")) %>%
mutate(DATE = ifelse(nchar(DATE) == 7, paste0("0", DATE), DATE),
DATE = as.Date(DATE, format = "%d%m%Y")) %>%
filter(DATE != as.Date("2001-01-01")) %>%
select(-GROUP, -PVL) %>%
filter(TYPE == "PEAK")
# 2. SEPARATE IS BEFORE/AFTER PEAK
IS.informations <- select(Survival.HS, seqnames, start, end, status, group, ID, duration, filteredMAX,survival, duration.norm, first, last)
# 1. Load the cleaned.dedup as GRANGE
IS_all.cleaned.dedup.gr  <- IS_all.cleaned.dedup %>%
filter(seqnames %in% c(paste0("OAR", 1:26), "OARX")) %>%
select(seqnames, start, orientation, group) %>%
dplyr::rename("strand" = orientation) %>%
mutate(end = start) %>%
group_by(group) %>%
mutate(numberIS = n()) %>%
GRanges()
# 2. Add HS information
# 2.1. Genome size:
genomeOAR <- getChromSize("OAR")
WTintegrableGenome <- IS_all.cleaned.dedup %>%
filter(seqnames %in% c(paste0("OAR", 1:26), "OARX")) %>%
filter(group == "WT") %>%
getIntegrableGenome(IS = ., win = 10000, genome = genomeOAR)
# 2.2. HS summarised
HS.gr.WT <- HS.gr[HS.gr$group == "WT"]
findOverlaps(IS_all.cleaned.dedup.gr, HS.gr.WT) %>%
as_data_frame() %>%
mutate(group = IS_all.cleaned.dedup.gr$group[queryHits],
significantHS = HS.gr$FDRbinom[subjectHits] < .05) %>%
group_by(group) %>%
summarise(
`Number IS in WT HS` = n(),
`Number IS in WT HS (orientation biais)` = sum(significantHS)
) %>%
left_join(IS_all.cleaned.dedup.gr %>%
as_data_frame() %>%
group_by(group) %>%
summarise(`Total number IS` = unique(numberIS)),
by = c("group" = "group")
) %>%
mutate(`Percentage in WT HS` = 100*(`Number IS in WT HS`/`Total number IS`),
`Total HS size (%)` = 100* round(sum(width(HS.gr.WT))/sum(genomeOAR$size), 3),
`Integrable Genome (%)` = 100*round(sum(WTintegrableGenome$chr.sizes)/sum(genomeOAR$size), 3)
) %>%
DT::datatable(class = 'cell-border stripe',
rownames = FALSE,
options = list(columnDefs = list(list(className = 'dt-center', targets = 1:ncol(.)-1)), pageLength=10),
caption = 'Table 4: Hotspots IS enrichment')
# FUNCTION
fisher <- function(a,b,c,d){
data <- matrix(c(a,b,c,d),ncol=2)
c(p = fisher.test(data, alternative = "greater")$p.value,
OR = fisher.test(data, alternative = "greater")$estimate)
}
### PREPARE SURVIVAL DATA
survival.norm <- IS_all.cleaned %>% group_by(ID) %>% summarise(survival = as.numeric(max(date) - min(date)))
Survival <- lapply(unique(IS_all.cleaned$ID), function(x)
IS_all.cleaned %>%
filter(ID == x) %>%
getCloneSurvival(., win = 10)
) %>%
bind_rows() %>%
left_join(survival.norm, by = c("ID" = "ID")) %>%
mutate(duration.norm = duration/survival) %>%
GRanges()
### GET HS
# WT
HS.gr.WT <- HS.gr[HS.gr$group == "WT"]
# INV
HS.gr.INV <- HS.gr[HS.gr$group == "INV"]
overlaps <- findOverlaps(HS.gr.INV, HS.gr.WT, maxgap = 10000)
INVonly.hotspots <- HS.gr.INV[-queryHits(overlaps)]
INVshared.hotspots <- HS.gr.INV[queryHits(overlaps)]
### SURVIVAL + HS
overlaps.HS.WT <- findOverlaps(Survival, HS.gr.WT, maxgap = 0, select = "first")
overlaps.HS.INV <- findOverlaps(Survival, HS.gr.INV, maxgap = 0, select = "first")
overlaps.HS.INVonly <- findOverlaps(Survival, INVonly.hotspots, maxgap = 0, select = "first")
overlaps.HS.INVshared <- findOverlaps(Survival, INVshared.hotspots, maxgap = 0, select = "first")
Survival$WT.HS <- ifelse(is.na(overlaps.HS.WT), "outHS", "inHS")
Survival$INV.HS <- ifelse(is.na(overlaps.HS.INV), "outHS", "inHS")
Survival$INVonly.HS <- ifelse(is.na(overlaps.HS.INVonly), "outHS", "inHS")
Survival$INVshared.HS <- ifelse(is.na(overlaps.HS.INVshared), "outHS", "inHS")
write.table(as_tibble(HS.gr.WT[subjectHits(overlaps)]) %>% arrange(desc(IS)), "~/Doctorat/Administratif/THESIS/Pictures/Clonality/MAIN/FIG_5/SharedHS_WTshared.txt", sep = "\t", quote = F, row.names = F)
write.table(as_tibble(INVonly.hotspots) %>% arrange(desc(IS)), "~/Doctorat/Administratif/THESIS/Pictures/Clonality/MAIN/FIG_5/SharedHS_INVonly.txt", sep = "\t", quote = F, row.names = F)
write.table(as_tibble(INVshared.hotspots) %>% arrange(desc(IS)), "~/Doctorat/Administratif/THESIS/Pictures/Clonality/MAIN/FIG_5/SharedHS_INVshared.txt", sep = "\t", quote = F, row.names = F)
### TEST ENRICHMENT
###### ABUNDANCE
ABUNDANCE <- data_frame()
for(i in c(5)){
temporary <- Survival %>%
as_tibble() %>%
group_by(group) %>%
summarise(
IS.NON_ABUNDANT = length(filteredMAX < i),
IS.ABUNDANT = length(filteredMAX >= i),
#### WT
IN.WT.HS.NON_ABUNDANT = sum(WT.HS[filteredMAX < i] == "inHS"),
IN.WT.HS.ABUNDANT = sum(WT.HS[filteredMAX >= i] == "inHS"),
OUT.WT.HS.NON_ABUNDANT = sum(WT.HS[filteredMAX < i] == "outHS"),
OUT.WT.HS.ABUNDANT = sum(WT.HS[filteredMAX >= i] == "outHS"),
#### INV ALL
IN.INVall.HS.NON_ABUNDANT = sum(INV.HS[filteredMAX < i] == "inHS"),
IN.INVall.HS.ABUNDANT = sum(INV.HS[filteredMAX >= i] == "inHS"),
OUT.INVall.HS.NON_ABUNDANT = sum(INV.HS[filteredMAX < i] == "outHS"),
OUT.INVall.HS.ABUNDANT = sum(INV.HS[filteredMAX >= i] == "outHS"),
#### INV ONLY
IN.INVonly.HS.NON_ABUNDANT = sum(INVonly.HS[filteredMAX < i] == "inHS"),
IN.INVonly.HS.ABUNDANT = sum(INVonly.HS[filteredMAX >= i] == "inHS"),
OUT.INVonly.HS.NON_ABUNDANT = sum(INVonly.HS[filteredMAX < i] == "outHS"),
OUT.INVonly.HS.ABUNDANT = sum(INVonly.HS[filteredMAX >= i] == "outHS"),
#### INV SHARED
IN.INVshared.HS.NON_ABUNDANT = sum(INVshared.HS[filteredMAX < i] == "inHS"),
IN.INVshared.HS.ABUNDANT = sum(INVshared.HS[filteredMAX >= i] == "inHS"),
OUT.INVshared.HS.NON_ABUNDANT = sum(INVshared.HS[filteredMAX < i] == "outHS"),
OUT.INVshared.HS.ABUNDANT = sum(INVshared.HS[filteredMAX >= i] == "outHS"),
#
THRESH = i,
type = "Abundance"
) %>%
ungroup() %>%
rowwise() %>%
mutate(
# WT HS
p.WT=round(fisher(OUT.WT.HS.NON_ABUNDANT, OUT.WT.HS.ABUNDANT, IN.WT.HS.NON_ABUNDANT, IN.WT.HS.ABUNDANT)[[1]], 3),
OR.WT=round(fisher(OUT.WT.HS.NON_ABUNDANT, OUT.WT.HS.ABUNDANT, IN.WT.HS.NON_ABUNDANT, IN.WT.HS.ABUNDANT)[[2]], 3),
significant.WT = p.WT < 0.05,
# INV ALL HS
p.INVall = round(fisher(OUT.INVall.HS.NON_ABUNDANT, OUT.INVall.HS.ABUNDANT, IN.INVall.HS.NON_ABUNDANT, IN.INVall.HS.ABUNDANT)[[1]], 3),
OR.INVall = round(fisher(OUT.INVall.HS.NON_ABUNDANT, OUT.INVall.HS.ABUNDANT, IN.INVall.HS.NON_ABUNDANT, IN.INVall.HS.ABUNDANT)[[2]], 3),
significant.INVall = p.INVall < 0.05,
# INV ONLY HS
p.INVonly = round(fisher(OUT.INVonly.HS.NON_ABUNDANT, OUT.INVonly.HS.ABUNDANT, IN.INVshared.HS.NON_ABUNDANT, IN.INVonly.HS.ABUNDANT)[[1]], 3),
OR.INVonly = round(fisher(OUT.INVonly.HS.NON_ABUNDANT, OUT.INVonly.HS.ABUNDANT, IN.INVshared.HS.NON_ABUNDANT, IN.INVonly.HS.ABUNDANT)[[2]], 3),
significant.INVonly = p.INVonly < 0.05,
# INV SHARED HS
p.INVshared = round(fisher(IN.INVshared.HS.NON_ABUNDANT, OUT.INVshared.HS.ABUNDANT, IN.INVshared.HS.NON_ABUNDANT, IN.INVshared.HS.ABUNDANT)[[1]], 3),
OR.INVshared = round(fisher(IN.INVshared.HS.NON_ABUNDANT, OUT.INVshared.HS.ABUNDANT, IN.INVshared.HS.NON_ABUNDANT, IN.INVshared.HS.ABUNDANT)[[2]], 3),
significant.INVshared = p.INVshared < 0.05)
ABUNDANCE <- bind_rows(ABUNDANCE, temporary)
}
###### ABUNDANCE
PERSISTENCE <- data_frame()
for(i in c(0.2)){
temporary <- Survival %>%
as_tibble() %>%
group_by(group) %>%
summarise(
IS.NON_PERSISTENCE = length(duration.norm < i),
IS.PERSISTENCE = length(duration.norm >= i),
#### WT
IN.WT.HS.NON_PERSISTENCE = sum(WT.HS[duration.norm < i] == "inHS"),
IN.WT.HS.PERSISTENCE = sum(WT.HS[duration.norm >= i] == "inHS"),
OUT.WT.HS.NON_PERSISTENCE = sum(WT.HS[duration.norm < i] == "outHS"),
OUT.WT.HS.PERSISTENCE = sum(WT.HS[duration.norm >= i] == "outHS"),
#### INV ALL
IN.INVall.HS.NON_PERSISTENCE = sum(INV.HS[duration.norm < i] == "inHS"),
IN.INVall.HS.PERSISTENCE = sum(INV.HS[duration.norm >= i] == "inHS"),
OUT.INVall.HS.NON_PERSISTENCE = sum(INV.HS[duration.norm < i] == "outHS"),
OUT.INVall.HS.PERSISTENCE = sum(INV.HS[duration.norm >= i] == "outHS"),
#### INV ONLY
IN.INVonly.HS.NON_PERSISTENCE = sum(INVonly.HS[duration.norm < i] == "inHS"),
IN.INVonly.HS.PERSISTENCE = sum(INVonly.HS[duration.norm >= i] == "inHS"),
OUT.INVonly.HS.NON_PERSISTENCE = sum(INVonly.HS[duration.norm < i] == "outHS"),
OUT.INVonly.HS.PERSISTENCE = sum(INVonly.HS[duration.norm >= i] == "outHS"),
#### INV SHARED
IN.INVshared.HS.NON_PERSISTENCE = sum(INVshared.HS[duration.norm < i] == "inHS"),
IN.INVshared.HS.PERSISTENCE = sum(INVshared.HS[duration.norm >= i] == "inHS"),
OUT.INVshared.HS.NON_PERSISTENCE = sum(INVshared.HS[duration.norm < i] == "outHS"),
OUT.INVshared.HS.PERSISTENCE = sum(INVshared.HS[duration.norm >= i] == "outHS"),
#
THRESH = i,
type = "Persistence"
) %>%
ungroup() %>%
rowwise() %>%
mutate(
# WT HS
p.WT=round(fisher(OUT.WT.HS.NON_PERSISTENCE, OUT.WT.HS.PERSISTENCE, IN.WT.HS.NON_PERSISTENCE, IN.WT.HS.PERSISTENCE)[[1]], 3),
OR.WT=round(fisher(OUT.WT.HS.NON_PERSISTENCE, OUT.WT.HS.PERSISTENCE, IN.WT.HS.NON_PERSISTENCE, IN.WT.HS.PERSISTENCE)[[2]], 3),
significant.WT = p.WT < 0.05,
# INV ALL HS
p.INVall = round(fisher(OUT.INVall.HS.NON_PERSISTENCE, OUT.INVall.HS.PERSISTENCE, IN.INVall.HS.NON_PERSISTENCE, IN.INVall.HS.PERSISTENCE)[[1]], 3),
OR.INVall = round(fisher(OUT.INVall.HS.NON_PERSISTENCE, OUT.INVall.HS.PERSISTENCE, IN.INVall.HS.NON_PERSISTENCE, IN.INVall.HS.PERSISTENCE)[[2]], 3),
significant.INVall = p.INVall < 0.05,
# INV ONLY HS
p.INVonly = round(fisher(OUT.INVonly.HS.NON_PERSISTENCE, OUT.INVonly.HS.PERSISTENCE, IN.INVshared.HS.NON_PERSISTENCE, IN.INVonly.HS.PERSISTENCE)[[1]], 3),
OR.INVonly = round(fisher(OUT.INVonly.HS.NON_PERSISTENCE, OUT.INVonly.HS.PERSISTENCE, IN.INVshared.HS.NON_PERSISTENCE, IN.INVonly.HS.PERSISTENCE)[[2]], 3),
significant.INVonly = p.INVonly < 0.05,
# INV SHARED HS
p.INVshared = round(fisher(IN.INVshared.HS.NON_PERSISTENCE, OUT.INVshared.HS.PERSISTENCE, IN.INVshared.HS.NON_PERSISTENCE, IN.INVshared.HS.PERSISTENCE)[[1]], 3),
OR.INVshared = round(fisher(IN.INVshared.HS.NON_PERSISTENCE, OUT.INVshared.HS.PERSISTENCE, IN.INVshared.HS.NON_PERSISTENCE, IN.INVshared.HS.PERSISTENCE)[[2]], 3),
significant.INVshared = p.INVshared < 0.05)
PERSISTENCE <- bind_rows(PERSISTENCE, temporary)
}
write.table(PERSISTENCE, "~/Doctorat/Administratif/THESIS/Pictures/Clonality/MAIN/FIG_5/PERSISTENCE_ENRICH.txt", sep = "\t", row.names = F, quote = F)
write.table(ABUNDANCE, "~/Doctorat/Administratif/THESIS/Pictures/Clonality/MAIN/FIG_5/ABUNDANCE_ENRICH.txt", sep = "\t", row.names = F, quote = F)
Survival
firstPEAK
Survival
IS.informations <- select(Survival, seqnames, start, end, status, group, ID, duration, filteredMAX,survival, duration.norm, first, last)
IS.informations
Survival
IS.informations <- select(as_tibble(Survival), seqnames, start, end, status, group, ID, duration, filteredMAX,survival, duration.norm, first, last)
firstPEAK
firstPEAK
firstPEAK$ID
IS_all.cleaned$ID
filter(firstPEAK, ID == i)
i <- "206"
fp <- filter(firstPEAK, ID == i)
fp
IS_all.cleaned$date
IS_all.cleaned$date.y
IS_all.cleaned$date
fp <- filter(firstPEAK, ID == i)
IS_all.cleaned %>%
filter(ID == i) %>%
mutate(ifelse(as.Date(date, format = "%d-%m-%Y") =< fp$DATE, "BEFORE", "AFTER"))
?as.Date
IS_all.cleaned %>%
filter(ID == i) %>%
mutate(ifelse(as.Date(date, "%d-%m-%Y") =< fp$DATE, "BEFORE", "AFTER"))
head(IS_all.cleaned$date)
as.Date(head(IS_all.cleaned$date))
IS_all.cleaned %>%
filter(ID == i) %>%
mutate(ifelse(as.Date(date) =< fp$DATE, "BEFORE", "AFTER"))
IS_all.cleaned %>%
filter(ID == i) %>%
mutate(ifelse(as.Date(date) <= fp$DATE, "BEFORE", "AFTER"))
